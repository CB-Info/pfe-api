{
  "extends": [
    "./.eslintrc.js"
  ],
  "plugins": [
    "security",
    "@typescript-eslint"
  ],
  "rules": {
    // Security-specific rules
    "security/detect-buffer-noassert": "error",
    "security/detect-child-process": "warn",
    "security/detect-disable-mustache-escape": "error",
    "security/detect-eval-with-expression": "error",
    "security/detect-new-buffer": "error",
    "security/detect-no-csrf-before-method-override": "error",
    "security/detect-non-literal-fs-filename": "warn",
    "security/detect-non-literal-regexp": "warn",
    "security/detect-non-literal-require": "warn",
    "security/detect-object-injection": "warn",
    "security/detect-possible-timing-attacks": "warn",
    "security/detect-pseudoRandomBytes": "error",
    "security/detect-unsafe-regex": "error",

    // TypeScript security rules
    "@typescript-eslint/no-explicit-any": "error",
    "@typescript-eslint/no-unsafe-assignment": "error",
    "@typescript-eslint/no-unsafe-call": "error",
    "@typescript-eslint/no-unsafe-member-access": "error",
    "@typescript-eslint/no-unsafe-return": "error",
    "@typescript-eslint/restrict-template-expressions": "error",

    // General security best practices
    "no-eval": "error",
    "no-implied-eval": "error",
    "no-new-func": "error",
    "no-script-url": "error",
    "no-alert": "error",
    "no-console": "warn",

    // Prevent potential security issues
    "no-unused-vars": "off",
    "@typescript-eslint/no-unused-vars": ["error", {
      "argsIgnorePattern": "^_",
      "varsIgnorePattern": "^_"
    }],

    // Strict null checks (some disabled for project compatibility)
    "@typescript-eslint/no-non-null-assertion": "error",
    // "@typescript-eslint/prefer-nullish-coalescing": "error",
    "@typescript-eslint/prefer-optional-chain": "error",

    // Prevent prototype pollution
    "no-prototype-builtins": "error",

    // Ensure proper error handling
    "@typescript-eslint/no-floating-promises": "error",
    "@typescript-eslint/await-thenable": "error",

    // Input validation (disabled for now due to project setup)
    // "@typescript-eslint/strict-boolean-expressions": ["error", {
    //   "allowString": false,
    //   "allowNumber": false,
    //   "allowNullableObject": false,
    //   "allowNullableBoolean": false,
    //   "allowNullableString": false,
    //   "allowNullableNumber": false,
    //   "allowAny": false
    // }],

    // Prevent information disclosure
    "no-debugger": "error",



    // XSS prevention
    "security/detect-bidi-characters": "error"
  },
  "env": {
    "node": true,
    "es2021": true,
    "jest": true
  },
  "parserOptions": {
    "ecmaVersion": 2021,
    "sourceType": "module",
    "project": "./tsconfig.json"
  },
  "overrides": [
    {
      "files": ["**/*.spec.ts", "**/*.test.ts"],
      "rules": {
        // Relax some rules for test files
        "no-console": "off",
        "@typescript-eslint/no-explicit-any": "warn",
        "@typescript-eslint/no-unsafe-assignment": "warn",
        "@typescript-eslint/no-unsafe-call": "warn",
        "@typescript-eslint/no-unsafe-member-access": "warn",
        "security/detect-object-injection": "off",
        "security/detect-non-literal-require": "off"
      }
    },
    {
      "files": ["scripts/**/*.js"],
      "rules": {
        // Relax some rules for utility scripts
        "no-console": "off",
        "@typescript-eslint/no-var-requires": "off"
      }
    },
    {
      "files": ["src/configs/**/*.ts"],
      "rules": {
        // Configuration files may need some flexibility
        "security/detect-non-literal-fs-filename": "off",
        "@typescript-eslint/no-var-requires": "off"
      }
    }
  ]
}
